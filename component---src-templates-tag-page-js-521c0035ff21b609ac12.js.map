{"version":3,"sources":["webpack:///./src/components/tag.js","webpack:///./src/components/postCard.js","webpack:///./src/templates/tag-page.js"],"names":["Tags","render","tags","this","props","className","map","tag","key","to","Component","ContentNoImage","count","postClass","node","frontmatter","thumbnail","fields","slug","title","date","description","excerpt","ContentWithImage","fluid","childImageSharp","TagPageTemplate","pageContext","posts","data","allMarkdownRemark","edges","siteTitle","site","siteMetadata","location","charAt","toUpperCase","slice","keywords","totalCount","React","pageQuery"],"mappings":"6IAyBeA,E,kGArBbC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACR,OACE,yBAAKG,UAAU,kBACZH,GACCA,EAAKI,KAAI,SAAAC,GAAG,OACV,0BAAMC,IAAKD,GACX,kBAAC,OAAD,CAAMF,UAAU,qBAChBG,IAAKD,EAELE,GAAE,SAAWF,GAHb,IAKEA,GAED,U,GAfMG,a,qBCgBbC,GAdS,aAAAP,GAAK,OAClB,6BACEC,UAAS,cAAeD,EAAMQ,MAAQ,GAAM,GAApB,mBAAf,IACPR,EAAMS,UADC,KAELT,EAAMU,KAAKC,YAAYC,UAAvB,0BAGAZ,EAAMU,KAAKC,YAAYC,UACnB,kBAAC,EAAD,CAAkBZ,MAAOA,IACzB,kBAAC,EAAD,CAAgBA,MAAOA,M,kGAMjCH,OAAA,WAAU,IACFG,EAAOD,KAAKC,MAAZA,MACN,OACE,yBAAKC,UAAU,qBACb,6BACA,kBAAC,EAAD,CAAMH,KAAME,EAAMU,KAAKC,YAAYb,QAEnC,6BACA,kBAAC,OAAD,CAAMO,GAAIL,EAAMU,KAAKG,OAAOC,KAAMb,UAAU,kBAC1C,wBAAIA,UAAU,mBACXD,EAAMU,KAAKC,YAAYI,OAASf,EAAMU,KAAKG,OAAOC,QAIvD,yBAAKb,UAAU,kBACdD,EAAMU,KAAKC,YAAYK,MAExB,yBAAKf,UAAU,kBACdD,EAAMU,KAAKC,YAAYM,aAAejB,EAAMU,KAAKQ,SAElD,6BACA,kBAAC,OAAD,CAAMb,GAAIL,EAAMU,KAAKG,OAAOC,KAAMb,UAAU,qCAExCD,EAAMU,KAAKC,YAAYM,aAAejB,EAAMU,KAAKQ,QAC7C,YACA,S,GA1BaZ,cAmCvBa,E,kGACJtB,OAAA,WAAU,IACFG,EAAOD,KAAKC,MAAZA,MACN,OACE,kBAAC,OAAD,CAAMK,GAAIL,EAAMU,KAAKG,OAAOC,KAAMb,UAAU,kBAC1C,kBAAC,IAAD,CACEmB,MAAOpB,EAAMU,KAAKC,YAAYC,UAAUS,gBAAgBD,MACxDnB,UAAU,oBAEZ,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,mBACXD,EAAMU,KAAKC,YAAYI,OAASf,EAAMU,KAAKG,OAAOC,MAGrD,yBAAKb,UAAU,kBACZD,EAAMU,KAAKC,YAAYK,MAE1B,yBAAKf,UAAU,kBACZD,EAAMU,KAAKC,YAAYM,aAAejB,EAAMU,KAAKQ,Y,GAlB/BZ,c,4JC/CzBgB,E,kGACJzB,OAAA,WACE,IAAMG,EAAQD,KAAKC,MACbG,EAAMJ,KAAKC,MAAMuB,YAAYpB,IAC7BqB,EAAQzB,KAAKC,MAAMyB,KAAKC,kBAAkBC,MAC1CC,EAAY7B,KAAKC,MAAMyB,KAAKI,KAAKC,aAAaf,MAEpD,OACE,kBAAC,IAAD,CAAQgB,SAAUhC,KAAKC,MAAM+B,SAAUhB,MAAOa,GAC5C,kBAAC,IAAD,CAEEb,MAAK,KAAMZ,EAAI6B,OAAO,GAAGC,cAAgB9B,EAAI+B,MAAM,IACnDC,SAAU,CAAC,GAAGhC,EAAJ,wCAEZ,4BAAQF,UAAU,iBAChB,wBAAIA,UAAU,mBAAd,IAAkCE,EAAlC,IAAwCH,EAAMyB,KAAKC,kBAAkBU,WAArE,MAEJ,yBAAKnC,UAAU,aACZuB,EAAMtB,KAAI,YAAe,IAAZQ,EAAW,EAAXA,KACZ,OACE,kBAAC,IAAD,CACEN,IAAKM,EAAKG,OAAOC,KACjBJ,KAAMA,EACND,UAAS,e,GAvBO4B,IAAM/B,WAiCrBgB,YAER,IAAMgB,EAAS","file":"component---src-templates-tag-page-js-521c0035ff21b609ac12.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"gatsby\";\n\nclass Tags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <div className=\"post-card-tags\">\n        {tags &&\n          tags.map(tag => (\n            <span key={tag}>\n            <Link className=\"post-card-tag-link\"\n            key={tag}\n            // style={{ textDecoration: \"none\" }}\n            to={`/tags/${tag}`}\n            >\n            #{tag}\n            </Link>\n            {\" \"}</span>\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default Tags;","import React, { Component } from \"react\";\nimport { Link } from \"gatsby\"\nimport Tags from \"./tag\"\nimport Img from \"gatsby-image\";\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n  >\n      {\n        props.node.frontmatter.thumbnail\n          ?(<ContentWithImage props={props}/>)\n          :(<ContentNoImage props={props}/>)\n      }\n  </article>\n)\n\nclass ContentNoImage extends Component {\n  render() {\n    const{props}=this.props;\n    return (\n      <div className=\"post-card-content\">\n        <div>\n        <Tags tags={props.node.frontmatter.tags}/>\n        </div>\n        <div>\n        <Link to={props.node.fields.slug} className=\"post-card-link\">\n          <h2 className=\"post-card-title\">\n            {props.node.frontmatter.title || props.node.fields.slug}\n          </h2>\n        </Link>\n        </div>\n        <div className=\"post-card-date\">\n        {props.node.frontmatter.date}\n        </div>\n        <div className=\"post-card-body\">\n        {props.node.frontmatter.description || props.node.excerpt}\n        </div>\n        <div>\n        <Link to={props.node.fields.slug} className=\"post-card-link post-card-readmore\">\n          {\n            props.node.frontmatter.description || props.node.excerpt\n              ?(\"Read more\")\n              :(null)\n          }\n        </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass ContentWithImage extends Component {\n  render() {\n    const{props}=this.props;\n    return (\n      <Link to={props.node.fields.slug} className=\"post-card-link\">\n        <Img\n          fluid={props.node.frontmatter.thumbnail.childImageSharp.fluid}\n          className=\"post-card-image\"\n        />\n        <div className=\"post-card-content\">\n          <h2 className=\"post-card-title\">\n            {props.node.frontmatter.title || props.node.fields.slug}\n          </h2>\n\n          <div className=\"post-card-date\">\n            {props.node.frontmatter.date}\n          </div>\n          <div className=\"post-card-body\">\n            {props.node.frontmatter.description || props.node.excerpt}\n          </div>\n        </div>\n      </Link>\n    );\n  }\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\nclass TagPageTemplate extends React.Component {\n  render() {\n    const props = this.props\n    const tag = this.props.pageContext.tag\n    const posts = this.props.data.allMarkdownRemark.edges\n    const siteTitle = this.props.data.site.siteMetadata.title\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          // title={`#${tag}`}\n          title={`#${tag.charAt(0).toUpperCase() + tag.slice(1)}`}\n          keywords={[`${tag}`, `blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <header className=\"tag-page-head\">\n          <h1 className=\"page-head-title\">#{tag}({props.data.allMarkdownRemark.totalCount})</h1>\n        </header>\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          return (\n            <PostCard\n              key={node.fields.slug}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n    )\n  }\n}\n\nexport default TagPageTemplate\n\nexport const pageQuery = graphql`\n  query PostByTag($tag: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(filter: { frontmatter: { tags: { in: [$tag] } } }, sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}